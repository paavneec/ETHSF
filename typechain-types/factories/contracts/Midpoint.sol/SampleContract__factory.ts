/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SampleContract,
  SampleContractInterface,
} from "../../../contracts/Midpoint.sol/SampleContract";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "SERVER_ID",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "USER_ID",
        type: "string",
      },
    ],
    name: "RequestMade",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "int32",
        name: "Status",
        type: "int32",
      },
      {
        indexed: false,
        internalType: "string",
        name: "Banned_User",
        type: "string",
      },
    ],
    name: "ResponseReceived",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "SERVER_ID",
        type: "string",
      },
      {
        internalType: "string",
        name: "USER_ID",
        type: "string",
      },
    ],
    name: "callMidpoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_requestId",
        type: "uint256",
      },
      {
        internalType: "uint64",
        name: "_midpointId",
        type: "uint64",
      },
      {
        internalType: "int32",
        name: "Status",
        type: "int32",
      },
      {
        internalType: "string",
        name: "Banned_User",
        type: "string",
      },
    ],
    name: "callback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610542806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063d215ee991461003b578063e76d855814610050575b600080fd5b61004e6100493660046102db565b610063565b005b61004e61005e366004610359565b61015d565b3273c0ffee4a3a2d488b138d090b8112875b90b5e6d9146100cb5760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642063616c6c6261636b2061646472657373000000000000000060448201526064015b60405180910390fd5b61017667ffffffffffffffff84161461011c5760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a5908135a591c1bda5b9d081251606a1b60448201526064016100c2565b7f61938d9e45243276b8cdc8b1b9b0f589de0d48ea4b2fe780d9efe8f7fba61f4a84838360405161014f93929190610419565b60405180910390a150505050565b604051600090610177908490839085908290602001610444565b60408051601f198184030181529082905263a2fb6d6f60e01b82529150600090819063a2fb6d6f906101b190610176908690600401610493565b602060405180830381600087803b1580156101cb57600080fd5b505af11580156101df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020391906104be565b90507fbaa1435617517887ddde4c973bfcd3c7e8a4bf9ac8a02eae60885c4e67eee9f681858560405161014f939291906104d7565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261025f57600080fd5b813567ffffffffffffffff8082111561027a5761027a610238565b604051601f8301601f19908116603f011681019082821181831017156102a2576102a2610238565b816040528381528660208588010111156102bb57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156102f157600080fd5b84359350602085013567ffffffffffffffff808216821461031157600080fd5b819450604087013591508160030b821461032a57600080fd5b9092506060860135908082111561034057600080fd5b5061034d8782880161024e565b91505092959194509250565b6000806040838503121561036c57600080fd5b823567ffffffffffffffff8082111561038457600080fd5b6103908683870161024e565b935060208501359150808211156103a657600080fd5b506103b38582860161024e565b9150509250929050565b60005b838110156103d85781810151838201526020016103c0565b838111156103e7576000848401525b50505050565b600081518084526104058160208601602086016103bd565b601f01601f19169290920160200192915050565b8381528260030b602082015260606040820152600061043b60608301846103ed565b95945050505050565b60008551610456818460208a016103bd565b6001600160f81b0319868116918401918252855161047b816001850160208a016103bd565b94169301600181019390935250506002019392505050565b67ffffffffffffffff831681526040602082015260006104b660408301846103ed565b949350505050565b6000602082840312156104d057600080fd5b5051919050565b8381526060602082015260006104f060608301856103ed565b828103604084015261050281856103ed565b969550505050505056fea2646970667358221220fd54ea1454f96a0508f74a1eb3ea0463b4eac2b661a20a2341dc75cb48662dc664736f6c63430008090033";

type SampleContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SampleContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SampleContract__factory extends ContractFactory {
  constructor(...args: SampleContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SampleContract> {
    return super.deploy(overrides || {}) as Promise<SampleContract>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SampleContract {
    return super.attach(address) as SampleContract;
  }
  override connect(signer: Signer): SampleContract__factory {
    return super.connect(signer) as SampleContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SampleContractInterface {
    return new utils.Interface(_abi) as SampleContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SampleContract {
    return new Contract(address, _abi, signerOrProvider) as SampleContract;
  }
}
